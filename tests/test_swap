import sys 
sys.path.append("swap_puzzle/")
from grid import Grid

import unittest

class Test_Swap(unittest.TestCase):

    def test_grid0(self):
        grid = Grid.grid_from_file("input//grid0.in") 
        grid.swap((0,0),(0,1))
        self.assertEqual(grid.state, [[4, 2], [3, 1]])
        grid.swap((1,0),(1,1))
        self.assertEqual(grid.state, [[4, 2], [1, 3]]) 
        grid.swap((0,0),(1,0))
        self.assertEqual(grid.state, [[1, 2], [4, 3]])
        grid.swap((0,1),(1,1))
        self.assertEqual(grid.state, [[1, 3], [4, 2]])
        #invalid swaps
        with self.assertRaises(Exception):
            grid.swap((0,0),(1,1))
            grid.swap((0,1),(1,0))

    def test_grid1(self):
        grid = Grid.grid_from_file("input//grid1.in")
        grid.swap((0,0), (0,1))
        self.assertEqual(grid.state, [[2, 1], [3, 4], [5, 6], [8, 7]]) 
        grid.swap((1,0), (1,1))
        self.assertEqual(grid.state, [[2, 1], [4, 3], [5, 6], [8, 7]]) 
        grid.swap((2,0), (2,1))
        self.assertEqual(grid.state, [[2, 1], [4, 3], [6, 5], [8, 7]]) 
        grid.swap((3,0), (3,1))
        self.assertEqual(grid.state, [[2, 1], [4, 3], [6, 5], [7, 8]]) 
        grid.swap((0,0), (1,0))
        self.assertEqual(grid.state, [[4, 1], [2, 3], [6, 5], [7, 8]]) 
        grid.swap((1,0), (2,0))
        self.assertEqual(grid.state, [[4, 1], [6, 3], [2, 5], [7, 8]]) 
        grid.swap((2,0), (3,0))
        self.assertEqual(grid.state, [[4, 1], [6, 3], [7, 5], [2, 8]]) 
        grid.swap((0,1), (1,1))
        self.assertEqual(grid.state, [[4, 3], [6, 1], [7, 5], [2, 8]]) 
        grid.swap((1,1), (2,1))
        self.assertEqual(grid.state, [[4, 3], [6, 5], [7, 1], [2, 8]]) 
        grid.swap((2,1), (3,1))
        self.assertEqual(grid.state, [[4, 3], [6, 5], [7, 8], [2, 1]])
        #invalid swaps
        list=[0,1,2,3]
        for i in range(4):
            list.remove(i)
            for j in list:
                with self.assertRaises(Exception):
                    grid.swap((i,0),(j,1))
        for i in range(2):
            for j in range(4):
                with self.assertRaises(Exception):
                    grid.swap((j,i),(j+2,i))
                    grid.swap((j,i),(j-2,i))
        

    def test_grid2(self):
        grid = Grid.grid_from_file("input//grid2.in") 
        #Rows
        grid.swap((0,0), (0,1))
        self.assertEqual(grid.state, [[5,7,3], [1,8,6], [4,2,9]])
        grid.swap((0,1), (0,2))
        self.assertEqual(grid.state, [[5,3,7], [1,8,6], [4,2,9]])
        grid.swap((1,0), (1,1))
        self.assertEqual(grid.state, [[5,3,7], [8,1,6], [4,2,9]])
        grid.swap((1,1), (1,2))
        self.assertEqual(grid.state, [[5,3,7], [8,6,1], [4,2,9]])
        grid.swap((2,0), (2,1))
        self.assertEqual(grid.state, [[5,3,7], [8,6,1], [2,4,9]])
        grid.swap((2,1), (2,2))
        self.assertEqual(grid.state, [[5,3,7], [8,6,1], [2,9,4]])
        #Columns
        grid.swap((0,0), (1,0))
        self.assertEqual(grid.state, [[8,3,7], [5,6,1], [2,9,4]])
        grid.swap((1,0), (2,0))
        self.assertEqual(grid.state, [[8,3,7], [2,6,1], [5,9,4]])
        grid.swap((0,1), (1,1))
        self.assertEqual(grid.state, [[8,6,7], [2,3,1], [5,9,4]])
        grid.swap((1,1), (2,1))
        self.assertEqual(grid.state, [[8,6,7], [2,9,1], [5,3,4]])
        grid.swap((0,2), (1,2))
        self.assertEqual(grid.state, [[8,6,1], [2,9,7], [5,3,4]])
        grid.swap((1,2), (2,2))
        self.assertEqual(grid.state, [[8,6,1], [2,9,4], [5,3,7]])
        #invalid swaps
        for i in range(3):
            for j in range(3):
                with self.assertRaises(Exception):
                    #two lines below
                    grid.swap((i,j),(i+2,j))
                    #two lines above
                    grid.swap((i,j),(i-2,j))
                    #two columns after
                    grid.swap((i,j),(i,j+2))
                    #two columns before
                    grid.swap((i,j),(i,j-2))
                    #diagonal
                    grid.swap((i,j),(i+1,j+1))


    def test_grid0_seq(self):
        grid = Grid.grid_from_file("input//grid0.in")
        grid.swap_seq([((0,0), (0,1)), ((0,1), (1,1)),((1,0), (0,0)) ])        
        self.assertEqual(grid.state, [[3,1], [4,2]])


    def test_grid1_seq(self):
        grid = Grid.grid_from_file("input//grid1.in")
        grid.swap_seq([((3,0), (3,1)), ((3,0), (3,1))])        
        self.assertEqual(grid.state, [[1, 2], [3, 4], [5, 6], [8, 7]])

    def test_grid2_seq(self):
        grid = Grid.grid_from_file("input//grid2.in")
        grid.swap_seq([((0,0), (0,1)), ((1,1), (1,2)),((2,0), (2,1))])        
        self.assertEqual(grid.state, [[5,7,3], [1,6,8], [2,4,9]])


if __name__ == '__main__':
    unittest.main()