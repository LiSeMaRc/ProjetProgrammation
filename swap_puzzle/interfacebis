from grid import Grid

import pygame 

pygame.init()

class Interface(Grid): 
    """
    
    """
    def __init__(self, m, n, initial_state = [],width=500,height=500):
        super().__init__(m, n, initial_state = [])
        self.width=width
        self.height=height
        self.cell_size=(self.width-200)//max(self.m,self.n),(self.height-200)//max(self.m,self.n)


    def draw_grid(self):
        #Colours
        global window_color
        window_color=(175,211,227)
        white=(255,255,255)
        black=(0,0,0)

        #Fonts
        title_font=pygame.font.Font(None,50)
        text_font=pygame.font.Font(None,30)
        font=pygame.font.Font(None,20)



        #Creation of the window:
        global window
        window = pygame.display.set_mode((self.width, self.height))
        
        window.fill(window_color) 

        #Instructions:
        text=text_font.render("Solve this swap puzzle in a minimum time",True,white)
        window.blit(text,(50,30))

        #horizontal lines
        for i in range(self.m+1): 
            pygame.draw.line(window, black, (100, 100+i * self.cell_size[1]), (100+self.n * self.cell_size[0], 100+i * self.cell_size[1]))

        #vertical lines
        for j in range(self.n+1):
            pygame.draw.line(window, black, (100+j * self.cell_size[0], 100), (100+j * self.cell_size[0], 100+self.m * self.cell_size[1]))
    
        #numbers
        for i in range(self.m):
            for j in range(self.n):
                print("i",i,"j",j,self.state[i][j])
                text=font.render(str(self.state[i][j]),True,black)
                window.blit(text, (100+j*self.cell_size[0] + self.cell_size[0]//2-1, 100+i*self.cell_size[1] + self.cell_size[1]//2-1))
    
        pygame.display.update()
        pygame.time.delay(10000)
    
    def swap_cells(self):
        exit=False
        cell_to_swap=None
        list_swap=[]
        text_font=pygame.font.Font(None,30)
        black=(0,0,0)

        while not exit:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    exit = True
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == 1: #clic gauche
                        x,y=pygame.mouse.get_pos()
                        col=(x-100)//self.cell_size[0]
                        row=(y-100)//self.cell_size[1]
                        #Premier ou deuxième clic?
                        if cell_to_swap==None:
                            cell_to_swap=(row,col)
                        else: 
                            #Modification of state[i][j]
                            self.swap((row,col),cell_to_swap) #add error message if swap not allowed?
                            #Shortest way?  
                            list_swap.append(((row,col),cell_to_swap))
                            #Sorted grid?
                            """
                            if self.node()==tuple(range(1,self.n*self.m+1)):
                                if list_swap==self.a_star(): 
                                    window.fill(window_color)
                                    title_text=text_font.render("you solved the grid in the shortest way possible!",True,black)
                                    window.blit(title_text,(self.width+50,self.height//2))
                                else:
                                    window.fill(window_color)
                                    title_text=text_font.render("You solved the grid but you can be faster!",True,black)
                                    window.blit(title_text,(self.width+50,self.height//2))
                            else:
                                self.draw_grid()
                                """
                            self.draw_grid() #à enlever
                            #Reinitialisation for the next couple of swaps
                            cell_to_swap=None
                            
                            

                            

    @classmethod
    def grid_from_file_bis(cls, file_name): 
        """
        Creates a grid object from class Grid, initialized with the information from the file file_name.
        
        Parameters: 
        -----------
        file_name: str
            Name of the file to load. The file must be of the format: 
            - first line contains "m n" 
            - next m lines contain n integers that represent the state of the corresponding cell

        Output: 
        -------
        grid: Grid
            The grid
        """
        with open(file_name, "r") as file:
            m, n = map(int, file.readline().split())
            initial_state = [[] for i_line in range(m)]
            for i_line in range(m):
                line_state = list(map(int, file.readline().split()))
                if len(line_state) != n: 
                    raise Exception("Format incorrect")
                initial_state[i_line] = line_state
            grid = Interface(m, n, initial_state,500,500)
        return grid
    



Interface.draw_grid(Interface.grid_from_file_bis("input\\grid2.in"))

Interface.swap_cells(Interface.grid_from_file_bis("input\\grid2.in"))
